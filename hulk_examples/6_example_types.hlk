type Point {
    x = 0;
    y = 0;

    getX() => self.x;
    getY() => self.y;

    setX(x) => self.x := x;
    setY(y) => self.y := y;
}

type PointSecond(x, y) {
    x = x;
    y = y;

    getX() => self.x;
    getY() => self.y;

    setX(x) => self.x := x;
    setY(y) => self.y := y;
}

let pt = new Point() in
    print("x: " @ pt.getX() @ "; y: " @ pt.getY());
let pt = new PointSecond(3,4) in
    print("x: " @ pt.getX() @ "; y: " @ pt.getY());

type PolarPoint inherits PointSecond {
    rho() => sqrt(self.getX() ^ 2 + self.getY() ^ 2);
}

let pt = new PolarPoint(3,4) in
    print("rho: " @ pt.rho());

type PolarPoint(phi, rho) inherits Point(rho * sin(phi), rho * cos(phi)) {
}

type Person(firstname, lastname) {
    firstname = firstname;
    lastname = lastname;

    name() => self.firstname @@ self.lastname;
}

type Knight inherits Person {
    name() => "Sir" @@ base();
}

let p = new Knight("Phil", "Collins") in
    print(p.name()); // prints Sir Phil Collins